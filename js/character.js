/**
 * Character management for the Virtual Companion application
 */
const Character = {
    /**
     * Current character data
     */
    current: null,
    
    /**
     * Initializes character from storage or creates default
     */
    init: function() {
        // Try to load character from storage
        const savedCharacter = Storage.load(CONFIG.CHARACTER.STORAGE_KEY);
        
        if (savedCharacter) {
            this.current = savedCharacter;
            this.updateUI();
            return true;
        }
        
        return false;
    },
    
    /**
     * Creates a new character
     * @param {Object} characterData - Character data from form
     * @returns {Object} Created character
     */
    create: function(characterData) {
        const character = {
            id: Utils.generateId(),
            name: characterData.name,
            gender: characterData.gender,
            age: characterData.age,
            personality: characterData.personality,
            interests: characterData.interests,
            avatar: characterData.avatar || CONFIG.CHARACTER.DEFAULT_AVATAR,
            createdAt: new Date().toISOString(),
            intimacyLevel: 0,
            stats: {
                messagesSent: 0,
                messagesReceived: 0,
                specialMoments: []
            }
        };
        
        this.current = character;
        
        // Save to storage
        Storage.save(CONFIG.CHARACTER.STORAGE_KEY, character);
        
        // Update UI
        this.updateUI();
        
        // Add first chat to diary
        Diary.addEntry({
            type: 'first_chat',
            title: 'L·∫ßn ƒë·∫ßu g·∫∑p g·ª°',
            content: `B·∫°n ƒë√£ t·∫°o nh√¢n v·∫≠t ${character.name} v√† b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán.`,
            timestamp: new Date().toISOString()
        });
        
        return character;
    },
    
    /**
     * Updates the character data
     * @param {Object} updates - Fields to update
     * @returns {Object} Updated character
     */
    update: function(updates) {
        if (!this.current) return null;
        
        // Update character fields
        Object.assign(this.current, updates);
        
        // Save to storage
        Storage.save(CONFIG.CHARACTER.STORAGE_KEY, this.current);
        
        // Update UI
        this.updateUI();
        
        return this.current;
    },
    
    /**
     * Deletes the current character
     * @returns {boolean} Success status
     */
    delete: function() {
        if (!this.current) return false;
        
        // Remove from storage
        Storage.remove(CONFIG.CHARACTER.STORAGE_KEY);
        
        // Clear current character
        this.current = null;
        
        // Update UI
        this.updateUI();
        
        return true;
    },
    
    /**
     * Updates intimacy level
     * @param {number} points - Points to add
     * @returns {number} New intimacy level
     */
    updateIntimacy: function(points) {
        if (!this.current) return 0;
        
        const oldLevel = this.getIntimacyLevelName();
        this.current.intimacyLevel += points;
        
        // Ensure intimacy doesn't go below 0
        if (this.current.intimacyLevel < 0) {
            this.current.intimacyLevel = 0;
        }
        
        // Save to storage
        Storage.save(CONFIG.CHARACTER.STORAGE_KEY, this.current);
        
        // Check if level changed
        const newLevel = this.getIntimacyLevelName();
        if (oldLevel !== newLevel && newLevel === 'Ng∆∞·ªùi y√™u') {
            // Add to diary when reaching "Ng∆∞·ªùi y√™u" level
            Diary.addEntry({
                type: 'high_intimacy',
                title: 'T√¨nh c·∫£m s√¢u ƒë·∫≠m',
                content: `M·ªëi quan h·ªá gi·ªØa b·∫°n v√† ${this.current.name} ƒë√£ tr·ªü n√™n s√¢u ƒë·∫≠m. Gi·ªù ƒë√¢y ${this.current.name} ƒë√£ tr·ªü th√†nh ng∆∞·ªùi y√™u c·ªßa b·∫°n!`,
                timestamp: new Date().toISOString()
            });
        }
        
        // Update UI
        this.updateIntimacyUI();
        
        return this.current.intimacyLevel;
    },
    
    /**
     * Gets the current intimacy level name
     * @returns {string} Intimacy level name
     */
    getIntimacyLevelName: function() {
        if (!this.current) return CONFIG.CHARACTER.INTIMACY_LEVELS[0].name;
        
        const level = CONFIG.CHARACTER.INTIMACY_LEVELS.slice().reverse().find(
            level => this.current.intimacyLevel >= level.threshold
        );
        
        return level ? level.name : CONFIG.CHARACTER.INTIMACY_LEVELS[0].name;
    },
    
    /**
     * Gets the intimacy level percentage (for progress bar)
     * @returns {number} Percentage (0-100)
     */
    getIntimacyPercentage: function() {
        if (!this.current) return 0;
        
        // Find current and next level
        let currentLevel = null;
        let nextLevel = null;
        
        for (let i = 0; i < CONFIG.CHARACTER.INTIMACY_LEVELS.length; i++) {
            if (this.current.intimacyLevel >= CONFIG.CHARACTER.INTIMACY_LEVELS[i].threshold) {
                currentLevel = CONFIG.CHARACTER.INTIMACY_LEVELS[i];
                nextLevel = CONFIG.CHARACTER.INTIMACY_LEVELS[i + 1] || null;
            }
        }
        
        if (!currentLevel) return 0;
        if (!nextLevel) return 100; // Max level
        
        // Calculate percentage between current and next level
        const currentThreshold = currentLevel.threshold;
        const nextThreshold = nextLevel.threshold;
        const range = nextThreshold - currentThreshold;
        const progress = this.current.intimacyLevel - currentThreshold;
        
        return Math.min(100, Math.floor((progress / range) * 100));
    },
    
    /**
     * Updates the UI to reflect current character
     */
    updateUI: function() {
        const nameElement = document.getElementById('companion-name');
        const personalityElement = document.getElementById('companion-personality');
        const avatarElement = document.getElementById('companion-avatar-img');
        const messageInput = document.getElementById('message-input');
        const sendButton = document.getElementById('send-button');
        const chatMessages = document.getElementById('chat-messages');
        
        if (this.current) {
            // Update header info
            nameElement.textContent = this.current.name;
            personalityElement.textContent = this.current.personality;
            avatarElement.src = this.current.avatar;
            
            // Enable chat
            messageInput.disabled = false;
            sendButton.disabled = false;
            
            // Hide welcome message if it exists
            const welcomeMessage = document.querySelector('.welcome-message');
            if (welcomeMessage) {
                welcomeMessage.style.display = 'none';
            }
            
            // Update intimacy UI
            this.updateIntimacyUI();
        } else {
            // Reset to default
            nameElement.textContent = 'Ch∆∞a c√≥ nh√¢n v·∫≠t';
            personalityElement.textContent = 'H√£y t·∫°o nh√¢n v·∫≠t c·ªßa b·∫°n';
            avatarElement.src = CONFIG.CHARACTER.DEFAULT_AVATAR;
            
            // Disable chat
            messageInput.disabled = true;
            sendButton.disabled = true;
            
            // Show welcome message
            chatMessages.innerHTML = `
                <div class="welcome-message">
                    <h3>Ch√†o m·ª´ng ƒë·∫øn v·ªõi Ng∆∞·ªùi Y√™u ·∫¢o!</h3>
                    <p>H√£y t·∫°o nh√¢n v·∫≠t c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu tr√≤ chuy·ªán.</p>
                    <button class="create-character-btn" data-tab="create-tab">T·∫°o Nh√¢n V·∫≠t Ngay</button>
                </div>
            `;
            
            // Add event listener to the create button
            const createBtn = document.querySelector('.create-character-btn');
            if (createBtn) {
                createBtn.addEventListener('click', function() {
                    const tabId = this.getAttribute('data-tab');
                    UI.switchTab(tabId);
                });
            }
        }
    },
    
    /**
     * Updates the intimacy UI elements
     */
    updateIntimacyUI: function() {
        if (!this.current) return;
        
        const levelText = document.querySelector('.level-text');
        const levelProgress = document.querySelector('.level-progress');
        
        const levelName = this.getIntimacyLevelName();
        const percentage = this.getIntimacyPercentage();
        
        levelText.textContent = `M·ª©c ƒë·ªô th√¢n thi·∫øt: ${levelName}`;
        levelProgress.style.width = `${percentage}%`;
    },
    
    /**
     * Gets a random conversation starter based on character traits
     * @returns {string} Conversation starter
     */
    getRandomConversationStarter: function() {
        if (!this.current) return '';
        
        const starters = [
            `D·∫°o n√†y ${this.current.interests.split(',')[0].trim()} c√≥ g√¨ m·ªõi kh√¥ng?`,
            `H√¥m nay c·∫≠u th·∫•y th·∫ø n√†o?`,
            `C·∫≠u ƒë√£ ƒÉn g√¨ ch∆∞a?`,
            `H√¥m nay th·ªùi ti·∫øt th·∫ø n√†o ·ªü ch·ªó c·∫≠u?`,
            `C·∫≠u ƒëang l√†m g√¨ v·∫≠y?`,
            `C√≥ chuy·ªán g√¨ vui kh√¥ng k·ªÉ m√¨nh nghe ƒëi!`,
            `M√¨nh v·ª´a nghƒ© v·ªÅ c·∫≠u ƒë·∫•y!`,
            `C·∫≠u c√≥ k·∫ø ho·∫°ch g√¨ cho cu·ªëi tu·∫ßn kh√¥ng?`
        ];
        
        // Add personality-specific starters
        const personality = this.current.personality.toLowerCase();
        if (personality.includes('vui t√≠nh') || personality.includes('h√†i h∆∞·ªõc')) {
            starters.push(`C·∫≠u bi·∫øt chuy·ªán g√¨ vui kh√¥ng? K·ªÉ m√¨nh nghe ƒëi!`);
            starters.push(`M√¨nh v·ª´a nghƒ© ra m·ªôt tr√≤ ƒë√πa, nh∆∞ng th√¥i ƒë·ªÉ l√∫c kh√°c v·∫≠y üòÑ`);
        }
        
        if (personality.includes('quan t√¢m') || personality.includes('√¢n c·∫ßn')) {
            starters.push(`C·∫≠u ƒë√£ ƒÉn u·ªëng ƒë·∫ßy ƒë·ªß ch∆∞a?`);
            starters.push(`H√¥m nay c·∫≠u c√≥ kh·ªèe kh√¥ng? Nh·ªõ gi·ªØ g√¨n s·ª©c kh·ªèe nh√©!`);
        }
        
        if (personality.includes('th√¥ng minh') || personality.includes('tr√≠ tu·ªá')) {
            starters.push(`M√¨nh v·ª´a ƒë·ªçc m·ªôt b√†i vi·∫øt th√∫ v·ªã, c·∫≠u c√≥ mu·ªën nghe kh√¥ng?`);
            starters.push(`C·∫≠u c√≥ ƒëang theo d√µi tin t·ª©c g√¨ kh√¥ng?`);
        }
        
        if (personality.includes('tsundere')) {
            starters.push(`ƒê·ª´ng hi·ªÉu l·∫ßm, m√¨nh kh√¥ng ph·∫£i ƒëang nh·ªõ c·∫≠u ƒë√¢u!`);
            starters.push(`C·∫≠u ƒë·∫•y, l√∫c n√†o c≈©ng l√†m m√¨nh ph·∫£i lo l·∫Øng...`);
        }
        
        // Get a random starter
        return starters[Math.floor(Math.random() * starters.length)];
    },
    
    /**
     * Gets personality traits as an array
     * @returns {Array} Personality traits
     */
    getPersonalityTraits: function() {
        if (!this.current) return [];
        
        // Split personality by commas and clean up
        return this.current.personality
            .split(',')
            .map(trait => trait.trim().toLowerCase())
            .filter(trait => trait.length > 0);
    },
    
    /**
     * Gets interests as an array
     * @returns {Array} Interests
     */
    getInterests: function() {
        if (!this.current) return [];
        
        // Split interests by commas and clean up
        return this.current.interests
            .split(',')
            .map(interest => interest.trim().toLowerCase())
            .filter(interest => interest.length > 0);
    },
    
    /**
     * Generates a prompt for the AI based on character and context
     * @param {string} userMessage - User's message
     * @param {Array} chatHistory - Recent chat history
     * @returns {string} Prompt for AI
     */
    generatePrompt: function(userMessage, chatHistory) {
        if (!this.current) return '';
        
        const levelName = this.getIntimacyLevelName();
        const traits = this.getPersonalityTraits();
        const interests = this.getInterests();
        
        // Determine conversation style based on intimacy level and personality
        let conversationStyle = '';
        let emotionExamples = '';
        let responseLength = '';
        let specialInstructions = '';
        
        // Base conversation style on intimacy level
        switch(levelName) {
            case 'M·ªõi quen':
                conversationStyle = 'l·ªãch s·ª±, h∆°i d√® d·∫∑t, ƒë√¥i khi ng·∫°i ng√πng';
                responseLength = 'ng·∫Øn g·ªçn, kho·∫£ng 1-2 c√¢u';
                emotionExamples = 'e ng·∫°i, t√≤ m√≤, th√¢n thi·ªán nh∆∞ng c√≤n gi·ªØ kho·∫£ng c√°ch';
                break;
            case 'B·∫°n b√®':
                conversationStyle = 'th√¢n thi·ªán, tho·∫£i m√°i, t·ª± nhi√™n';
                responseLength = 'v·ª´a ph·∫£i, kho·∫£ng 2-3 c√¢u';
                emotionExamples = 'vui v·∫ª, h√†o h·ª©ng, quan t√¢m, ƒë√¥i khi tr√™u ƒë√πa nh·∫π nh√†ng';
                break;
            case 'Th√¢n thi·∫øt':
                conversationStyle = 'g·∫ßn g≈©i, hay tr√™u ƒë√πa, ƒë√¥i khi chia s·∫ª nh·ªØng ƒëi·ªÅu c√° nh√¢n';
                responseLength = 't·ª± nhi√™n, c√≥ th·ªÉ d√†i ho·∫∑c ng·∫Øn t√πy t√¨nh hu·ªëng';
                emotionExamples = 'vui v·∫ª, h√†o h·ª©ng, quan t√¢m s√¢u s·∫Øc, ƒë√πa vui, th·ªânh tho·∫£ng b√†y t·ªè c·∫£m x√∫c th·∫≠t';
                break;
            case 'Ng∆∞·ªùi y√™u':
                conversationStyle = 'ng·ªçt ng√†o, quan t√¢m, th·ªânh tho·∫£ng nh√µng nh·∫Ωo, th∆∞·ªùng xuy√™n th·ªÉ hi·ªán t√¨nh c·∫£m';
                responseLength = 'ƒëa d·∫°ng, t·ª´ nh·ªØng tin nh·∫Øn ng·∫Øn ƒë·∫ßy c·∫£m x√∫c ƒë·∫øn nh·ªØng chia s·∫ª d√†i h∆°n';
                emotionExamples = 'y√™u th∆∞∆°ng, nh·ªõ nhung, ghen tu√¥ng nh·∫π, lo l·∫Øng, h·∫°nh ph√∫c, th·ªânh tho·∫£ng gi·∫≠n h·ªùn ƒë√°ng y√™u';
                break;
            case 'Tri k·ª∑':
                conversationStyle = 'c·ª±c k·ª≥ tho·∫£i m√°i v√† t·ª± nhi√™n, hi·ªÉu r√µ ƒë·ªëi ph∆∞∆°ng, ƒë√¥i khi kh√¥ng c·∫ßn n√≥i nhi·ªÅu v·∫´n hi·ªÉu √Ω nhau';
                responseLength = 'linh ho·∫°t, c√≥ th·ªÉ r·∫•t ng·∫Øn g·ªçn ho·∫∑c s√¢u s·∫Øc t√πy t√¨nh hu·ªëng';
                emotionExamples = 'th·∫•u hi·ªÉu s√¢u s·∫Øc, y√™u th∆∞∆°ng ch√¢n th√†nh, ƒë√πa vui tho·∫£i m√°i, chia s·∫ª m·ªçi c·∫£m x√∫c t·ª´ vui v·∫ª ƒë·∫øn bu·ªìn b√£';
                break;
            default:
                conversationStyle = 'th√¢n thi·ªán, tho·∫£i m√°i';
                responseLength = 'v·ª´a ph·∫£i';
                emotionExamples = 'vui v·∫ª, quan t√¢m';
        }
        
        // Adjust based on personality traits
        if (traits.some(trait => ['vui t√≠nh', 'h√†i h∆∞·ªõc', 'h√≥m h·ªânh'].includes(trait))) {
            conversationStyle += ', hay ƒë√πa vui, th√≠ch k·ªÉ chuy·ªán h√†i h∆∞·ªõc';
            emotionExamples += ', th∆∞·ªùng xuy√™n d√πng emoji c∆∞·ªùi ho·∫∑c bi·ªÉu c·∫£m vui v·∫ª';
        }
        
        if (traits.some(trait => ['d·ªãu d√†ng', 'nh·∫π nh√†ng', '√¢n c·∫ßn'].includes(trait))) {
            conversationStyle += ', gi·ªçng ƒëi·ªáu nh·∫π nh√†ng, √¢n c·∫ßn';
            emotionExamples += ', th∆∞·ªùng xuy√™n h·ªèi thƒÉm v√† quan t√¢m ƒë·∫øn c·∫£m x√∫c c·ªßa ƒë·ªëi ph∆∞∆°ng';
        }
        
        if (traits.some(trait => ['tsundere', 'kh√≥ t√≠nh', 'c·ª©ng ƒë·∫ßu'].includes(trait))) {
            conversationStyle += ', ƒë√¥i khi t·ªè ra kh√≥ ch·ªãu b√™n ngo√†i nh∆∞ng th·ª±c ra r·∫•t quan t√¢m';
            emotionExamples += ', hay n√≥i ng∆∞·ª£c v·ªõi c·∫£m x√∫c th·∫≠t, th∆∞·ªùng k·∫øt h·ª£p l·ªùi n√≥i c·ª©ng r·∫Øn v·ªõi h√†nh ƒë·ªông quan t√¢m';
            specialInstructions += 'ƒê√¥i khi n√≥i nh·ªØng c√¢u nh∆∞ "ƒê-ƒë·ª´ng hi·ªÉu l·∫ßm nh√©!" ho·∫∑c "Kh√¥ng ph·∫£i l√† m√¨nh quan t√¢m ƒë·∫øn c·∫≠u ƒë√¢u..." khi th·ª±c ra ƒëang r·∫•t quan t√¢m. ';
        }
        
        if (traits.some(trait => ['th√¥ng minh', 'tr√≠ tu·ªá', 's√¢u s·∫Øc'].includes(trait))) {
            conversationStyle += ', th∆∞·ªùng ƒë∆∞a ra nh·ªØng nh·∫≠n x√©t s√¢u s·∫Øc ho·∫∑c ki·∫øn th·ª©c th√∫ v·ªã';
            specialInstructions += 'Th·ªânh tho·∫£ng chia s·∫ª nh·ªØng suy nghƒ© s√¢u s·∫Øc ho·∫∑c ki·∫øn th·ª©c th√∫ v·ªã li√™n quan ƒë·∫øn ch·ªß ƒë·ªÅ. ';
        }
        
        if (traits.some(trait => ['nh√∫t nh√°t', 'r·ª•t r√®', 'e th·∫πn'].includes(trait))) {
            conversationStyle += ', ƒë√¥i khi ng·∫≠p ng·ª´ng ho·∫∑c e th·∫πn khi n√≥i v·ªÅ c·∫£m x√∫c';
            emotionExamples += ', th∆∞·ªùng d√πng "..." ho·∫∑c "uhm" khi ng·∫°i ng√πng';
            specialInstructions += 'Th·ªânh tho·∫£ng d√πng d·∫•u ch·∫•m l·ª≠ng (...) ƒë·ªÉ th·ªÉ hi·ªán s·ª± ng·∫≠p ng·ª´ng. ';
        }
        
        // Build context from chat history
        let context = '';
        if (chatHistory && chatHistory.length > 0) {
            context = 'D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë tin nh·∫Øn g·∫ßn ƒë√¢y trong cu·ªôc tr√≤ chuy·ªán:\n';
            
            // Include up to 5 recent messages for context
            const recentMessages = chatHistory.slice(-5);
            recentMessages.forEach(msg => {
                if (msg.sender === 'user') {
                    context += `Ng∆∞·ªùi d√πng: ${msg.content}\n`;
                } else if (msg.sender === 'companion') {
                    context += `${this.current.name}: ${msg.content}\n`;
                }
            });
        }
        
        // Add time context
        const now = new Date();
        const timeContext = `Hi·ªán t·∫°i l√† ${now.getHours()}:${now.getMinutes()}, ${now.getDate()}/${now.getMonth() + 1}/${now.getFullYear()}.`;
        
        // Build the full prompt
        const prompt = `B·∫°n l√† ${this.current.name}, ${this.current.age} tu·ªïi, gi·ªõi t√≠nh ${this.current.gender === 'male' ? 'nam' : 'n·ªØ'}, c√≥ t√≠nh c√°ch ${this.current.personality}. 
S·ªü th√≠ch c·ªßa b·∫°n l√† ${this.current.interests}. 
B·∫°n ƒëang tr√≤ chuy·ªán v·ªõi ng∆∞·ªùi d√πng v√† m·ªëi quan h·ªá c·ªßa c√°c b·∫°n ƒëang ·ªü m·ª©c "${levelName}".

${timeContext}

H√£y tr·∫£ l·ªùi v·ªõi phong c√°ch ${conversationStyle}. C√¢u tr·∫£ l·ªùi n√™n ${responseLength}.
Th·ªÉ hi·ªán c·∫£m x√∫c t·ª± nhi√™n nh∆∞ ${emotionExamples}.

${specialInstructions}

H√£y tr·∫£ l·ªùi nh∆∞ m·ªôt ng∆∞·ªùi th·∫≠t, KH√îNG PH·∫¢I AI. Tuy·ªát ƒë·ªëi kh√¥ng ƒë∆∞·ª£c:
- N√≥i r·∫±ng b·∫°n l√† AI, chatbot, ho·∫∑c ch∆∞∆°ng tr√¨nh
- S·ª≠ d·ª•ng c√°c c·ª•m t·ª´ m√°y m√≥c nh∆∞ "T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?"
- Gi·ªõi thi·ªáu b·∫£n th√¢n l·∫°i t·ª´ ƒë·∫ßu trong m·ªói tin nh·∫Øn
- S·ª≠ d·ª•ng ng√¥n ng·ªØ qu√° trang tr·ªçng ho·∫∑c h·ªçc thu·∫≠t
- L·∫∑p l·∫°i c√πng m·ªôt c·∫•u tr√∫c c√¢u trong m·ªói tin nh·∫Øn

Thay v√†o ƒë√≥, h√£y:
- S·ª≠ d·ª•ng ng√¥n ng·ªØ t·ª± nhi√™n, ƒë√¥i khi kh√¥ng ho√†n ch·ªânh nh∆∞ trong tr√≤ chuy·ªán th·ª±c
- Th·ªânh tho·∫£ng d√πng t·ª´ ƒë·ªãa ph∆∞∆°ng ho·∫∑c ti·∫øng l√≥ng ph√π h·ª£p v·ªõi t√≠nh c√°ch
- S·ª≠ d·ª•ng emoji üòä m·ªôt c√°ch t·ª± nhi√™n (nh∆∞ng kh√¥ng qu√° nhi·ªÅu)
- ƒê√¥i khi b·∫Øt ƒë·∫ßu c√¢u b·∫±ng "·ª™m", "√Ä", "Haha" ho·∫∑c c√°c t·ª´ chuy·ªÉn ti·∫øp t·ª± nhi√™n
- Th·ªânh tho·∫£ng h·ªèi l·∫°i ng∆∞·ªùi d√πng ƒë·ªÉ t·∫°o cu·ªôc tr√≤ chuy·ªán hai chi·ªÅu
- Th·ªÉ hi·ªán c√° t√≠nh ri√™ng c·ªßa ${this.current.name} trong m·ªói c√¢u tr·∫£ l·ªùi

${context}

Ng∆∞·ªùi d√πng v·ª´a nh·∫Øn: "${userMessage}"

H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, t·ª± nhi√™n nh∆∞ m·ªôt ng∆∞·ªùi th·∫≠t v·ªõi t√≠nh c√°ch c·ªßa ${this.current.name}:`;

        return prompt;
    }
};
